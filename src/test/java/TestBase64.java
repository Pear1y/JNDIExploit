import com.feihong.ldap.utils.Util;
import org.junit.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

public class TestBase64 {
    @Test
    public void testEncoder() throws Exception {
        String test = "Hello, how are you?";

        System.out.println(Util.base64Encode(test.getBytes()));
    }

    @Test
    public void testDecoder() throws Exception{
       String base64Strng = "SGVsbG8sIGhvdyBhcmUgeW91Pw==";

        byte[] bytes = Util.base64Decode(base64Strng);
        System.out.println(new String(bytes));
    }

    @Test
    public void test() throws Exception {
        String base64String = "";
        FileOutputStream fous = new FileOutputStream("1.class");
        fous.write(Util.base64Decode(base64String));
        fous.close();

    }

    @Test
    public void test2() throws Exception {
        String code = Util.getClassCode("com.feihong.ldap.template.MyClassLoader");
        FileOutputStream fous = new FileOutputStream("Test1.class");
        fous.write(Util.base64Decode(code));
        fous.close();

        System.out.println(code);
    }

    @Test
    public void test3() throws Exception {
        String code = Util.getClassCode("com.feihong.ldap.template.DynamicFilterTemplate");
        FileOutputStream fous = new FileOutputStream("Test2.class");
        fous.write(Util.base64Decode(code));
        fous.close();

        System.out.println(code);
    }
}
